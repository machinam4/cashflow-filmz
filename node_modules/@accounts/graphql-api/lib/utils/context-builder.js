"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@graphql-modules/core");
var request_ip_1 = require("request-ip");
exports.context = function (moduleName) { return function (_a, _, _b) {
    var req = _a.req;
    var injector = _b.injector;
    return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var config, headerName, authToken, user, error_1, ip, userAgent;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!req) {
                        return [2 /*return*/, {
                                ip: '',
                                userAgent: '',
                                infos: {
                                    ip: '',
                                    userAgent: '',
                                },
                            }];
                    }
                    config = injector.get(core_1.ModuleConfig(moduleName));
                    headerName = config.headerName || 'Authorization';
                    authToken = (req.headers[headerName] || req.headers[headerName.toLowerCase()]);
                    authToken = authToken && authToken.replace('Bearer ', '');
                    if (!(authToken && !config.excludeAddUserInContext)) return [3 /*break*/, 4];
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, config.accountsServer.resumeSession(authToken)];
                case 2:
                    user = _c.sent();
                    return [3 /*break*/, 4];
                case 3:
                    error_1 = _c.sent();
                    return [3 /*break*/, 4];
                case 4:
                    ip = request_ip_1.getClientIp(req);
                    userAgent = req.headers['user-agent'] || '';
                    if (req.headers['x-ucbrowser-ua']) {
                        // special case of UC Browser
                        userAgent = req.headers['x-ucbrowser-ua'];
                    }
                    return [2 /*return*/, {
                            authToken: authToken,
                            user: user,
                            userId: user && user.id,
                            userAgent: userAgent,
                            ip: ip,
                            infos: {
                                userAgent: userAgent,
                                ip: ip,
                            },
                        }];
            }
        });
    });
}; };
//# sourceMappingURL=context-builder.js.map