"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var password_1 = require("@accounts/password");
var server_1 = require("@accounts/server");
exports.Mutation = {
    addEmail: function (_, _a, _b) {
        var newEmail = _a.newEmail;
        var user = _b.user, injector = _b.injector;
        return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var userId;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(user && user.id)) {
                            throw new Error('Unauthorized');
                        }
                        userId = user.id;
                        return [4 /*yield*/, injector.get(password_1.AccountsPassword).addEmail(userId, newEmail)];
                    case 1:
                        _c.sent();
                        return [2 /*return*/, null];
                }
            });
        });
    },
    changePassword: function (_, _a, _b) {
        var oldPassword = _a.oldPassword, newPassword = _a.newPassword;
        var user = _b.user, injector = _b.injector;
        return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var userId;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(user && user.id)) {
                            throw new Error('Unauthorized');
                        }
                        userId = user.id;
                        return [4 /*yield*/, injector.get(password_1.AccountsPassword).changePassword(userId, oldPassword, newPassword)];
                    case 1:
                        _c.sent();
                        return [2 /*return*/, null];
                }
            });
        });
    },
    createUser: function (_, _a, ctx) {
        var user = _a.user;
        return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var injector, infos, accountsServer, accountsPassword, userId, error_1, createdUser, loginResult;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        injector = ctx.injector, infos = ctx.infos;
                        accountsServer = injector.get(server_1.AccountsServer);
                        accountsPassword = injector.get(password_1.AccountsPassword);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, accountsPassword.createUser(user)];
                    case 2:
                        userId = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _b.sent();
                        // If ambiguousErrorMessages is true we obfuscate the email or username already exist error
                        // to prevent user enumeration during user creation
                        if (accountsServer.options.ambiguousErrorMessages &&
                            error_1 instanceof server_1.AccountsJsError &&
                            (error_1.code === password_1.CreateUserErrors.EmailAlreadyExists ||
                                error_1.code === password_1.CreateUserErrors.UsernameAlreadyExists)) {
                            return [2 /*return*/, {}];
                        }
                        throw error_1;
                    case 4:
                        if (!accountsServer.options.enableAutologin) {
                            return [2 /*return*/, {
                                    userId: accountsServer.options.ambiguousErrorMessages ? null : userId,
                                }];
                        }
                        return [4 /*yield*/, accountsServer.findUserById(userId)];
                    case 5:
                        createdUser = _b.sent();
                        return [4 /*yield*/, accountsServer.loginWithUser(createdUser, infos)];
                    case 6:
                        loginResult = _b.sent();
                        return [2 /*return*/, {
                                userId: userId,
                                loginResult: loginResult,
                            }];
                }
            });
        });
    },
    twoFactorSet: function (_, _a, _b) {
        var code = _a.code, secret = _a.secret;
        var user = _b.user, injector = _b.injector;
        return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var userId;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        // Make sure user is logged in
                        if (!(user && user.id)) {
                            throw new Error('Unauthorized');
                        }
                        userId = user.id;
                        return [4 /*yield*/, injector.get(password_1.AccountsPassword).twoFactor.set(userId, secret, code)];
                    case 1:
                        _c.sent();
                        return [2 /*return*/, null];
                }
            });
        });
    },
    twoFactorUnset: function (_, _a, _b) {
        var code = _a.code;
        var user = _b.user, injector = _b.injector;
        return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var userId;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        // Make sure user is logged in
                        if (!(user && user.id)) {
                            throw new Error('Unauthorized');
                        }
                        userId = user.id;
                        return [4 /*yield*/, injector.get(password_1.AccountsPassword).twoFactor.unset(userId, code)];
                    case 1:
                        _c.sent();
                        return [2 /*return*/, null];
                }
            });
        });
    },
    resetPassword: function (_, _a, _b) {
        var token = _a.token, newPassword = _a.newPassword;
        var injector = _b.injector, infos = _b.infos;
        return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_c) {
                return [2 /*return*/, injector.get(password_1.AccountsPassword).resetPassword(token, newPassword, infos)];
            });
        });
    },
    sendResetPasswordEmail: function (_, _a, _b) {
        var email = _a.email;
        var injector = _b.injector;
        return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, injector.get(password_1.AccountsPassword).sendResetPasswordEmail(email)];
                    case 1:
                        _c.sent();
                        return [2 /*return*/, null];
                }
            });
        });
    },
    verifyEmail: function (_, _a, _b) {
        var token = _a.token;
        var injector = _b.injector;
        return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, injector.get(password_1.AccountsPassword).verifyEmail(token)];
                    case 1:
                        _c.sent();
                        return [2 /*return*/, null];
                }
            });
        });
    },
    sendVerificationEmail: function (_, _a, _b) {
        var email = _a.email;
        var injector = _b.injector;
        return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, injector.get(password_1.AccountsPassword).sendVerificationEmail(email)];
                    case 1:
                        _c.sent();
                        return [2 /*return*/, null];
                }
            });
        });
    },
};
//# sourceMappingURL=mutation.js.map