"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@graphql-modules/core");
var schema_merging_1 = require("@graphql-toolkit/schema-merging");
var server_1 = require("@accounts/server");
var types_1 = tslib_1.__importDefault(require("./schema/types"));
var query_1 = tslib_1.__importDefault(require("./schema/query"));
var mutation_1 = tslib_1.__importDefault(require("./schema/mutation"));
var schema_def_1 = tslib_1.__importDefault(require("./schema/schema-def"));
var query_2 = require("./resolvers/query");
var mutation_2 = require("./resolvers/mutation");
var user_1 = require("./resolvers/user");
var accounts_password_1 = require("../accounts-password");
var authenticated_directive_1 = require("../../utils/authenticated-directive");
var utils_1 = require("../../utils");
var core_2 = require("../core");
// You can see the below. It is really easy to create a reusable GraphQL-Module with different configurations
exports.AccountsModule = new core_1.GraphQLModule({
    name: 'accounts',
    typeDefs: function (_a) {
        var config = _a.config;
        return schema_merging_1.mergeTypeDefs(tslib_1.__spreadArrays([
            types_1.default,
            query_1.default(config),
            mutation_1.default(config)
        ], schema_def_1.default(config)), {
            useSchemaDefinition: config.withSchemaDefinition,
        });
    },
    resolvers: function (_a) {
        var _b;
        var config = _a.config;
        return (_b = {},
            _b[config.rootQueryName || 'Query'] = query_2.Query,
            _b[config.rootMutationName || 'Mutation'] = mutation_2.Mutation,
            _b.User = user_1.User,
            _b);
    },
    // If necessary, import AccountsPasswordModule together with this module
    imports: function (_a) {
        var config = _a.config;
        return tslib_1.__spreadArrays([
            core_2.CoreAccountsModule.forRoot({
                userAsInterface: config.userAsInterface,
            })
        ], (config.accountsServer.getServices().password
            ? [
                accounts_password_1.AccountsPasswordModule.forRoot(tslib_1.__assign({ accountsPassword: config.accountsServer.getServices().password }, config)),
            ]
            : []));
    },
    providers: function (_a) {
        var config = _a.config;
        return [
            {
                provide: server_1.AccountsServer,
                useValue: config.accountsServer,
            },
        ];
    },
    context: utils_1.context('accounts'),
    schemaDirectives: {
        auth: authenticated_directive_1.AuthenticatedDirective,
    },
    configRequired: true,
});
//# sourceMappingURL=index.js.map