"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var server_1 = require("@accounts/server");
exports.Mutation = {
    authenticate: function (_, args, ctx) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var serviceName, params, injector, infos, authenticated;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    serviceName = args.serviceName, params = args.params;
                    injector = ctx.injector, infos = ctx.infos;
                    return [4 /*yield*/, injector
                            .get(server_1.AccountsServer)
                            .loginWithService(serviceName, params, infos)];
                case 1:
                    authenticated = _a.sent();
                    return [2 /*return*/, authenticated];
            }
        });
    }); },
    verifyAuthentication: function (_, args, ctx) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var serviceName, params, injector, infos, authenticated;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    serviceName = args.serviceName, params = args.params;
                    injector = ctx.injector, infos = ctx.infos;
                    return [4 /*yield*/, injector
                            .get(server_1.AccountsServer)
                            .authenticateWithService(serviceName, params, infos)];
                case 1:
                    authenticated = _a.sent();
                    return [2 /*return*/, authenticated];
            }
        });
    }); },
    impersonate: function (_, args, ctx) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var accessToken, impersonated, injector, infos, impersonateRes;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    accessToken = args.accessToken, impersonated = args.impersonated;
                    injector = ctx.injector, infos = ctx.infos;
                    return [4 /*yield*/, injector.get(server_1.AccountsServer).impersonate(accessToken, {
                            userId: impersonated.userId,
                            username: impersonated.username,
                            email: impersonated.email,
                        }, infos)];
                case 1:
                    impersonateRes = _a.sent();
                    // So ctx.user can be used in subsequent queries / mutations
                    if (impersonateRes && impersonateRes.user && impersonateRes.tokens) {
                        ctx.user = impersonateRes.user;
                        ctx.authToken = impersonateRes.tokens.accessToken;
                    }
                    return [2 /*return*/, impersonateRes];
            }
        });
    }); },
    logout: function (_, __, context) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var authToken, injector;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    authToken = context.authToken, injector = context.injector;
                    if (!authToken) return [3 /*break*/, 2];
                    return [4 /*yield*/, injector.get(server_1.AccountsServer).logout(authToken)];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2: return [2 /*return*/, null];
            }
        });
    }); },
    refreshTokens: function (_, args, ctx) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var accessToken, refreshToken, injector, infos, refreshedSession;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    accessToken = args.accessToken, refreshToken = args.refreshToken;
                    injector = ctx.injector, infos = ctx.infos;
                    return [4 /*yield*/, injector
                            .get(server_1.AccountsServer)
                            .refreshTokens(accessToken, refreshToken, infos)];
                case 1:
                    refreshedSession = _a.sent();
                    return [2 /*return*/, refreshedSession];
            }
        });
    }); },
};
//# sourceMappingURL=mutation.js.map