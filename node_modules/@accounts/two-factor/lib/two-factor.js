"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var speakeasy = tslib_1.__importStar(require("speakeasy"));
var errors_1 = require("./errors");
var utils_1 = require("./utils");
var defaultOptions = {
    secretLength: 20,
    window: 0,
    errors: errors_1.errors,
};
var TwoFactor = /** @class */ (function () {
    function TwoFactor(options) {
        if (options === void 0) { options = {}; }
        this.serviceName = 'two-factor';
        this.options = tslib_1.__assign(tslib_1.__assign({}, defaultOptions), options);
    }
    /**
     * Set two factor store
     */
    TwoFactor.prototype.setStore = function (store) {
        this.db = store;
    };
    /**
     * Authenticate a user with a 2fa code
     */
    TwoFactor.prototype.authenticate = function (user, code) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var twoFactorService;
            return tslib_1.__generator(this, function (_a) {
                if (!code) {
                    throw new Error(this.options.errors.codeRequired);
                }
                twoFactorService = utils_1.getUserTwoFactorService(user);
                // If user does not have 2fa set return error
                if (!twoFactorService) {
                    throw new Error(this.options.errors.userTwoFactorNotSet);
                }
                if (!speakeasy.totp.verify({
                    secret: twoFactorService.secret.base32,
                    encoding: 'base32',
                    token: code,
                    window: this.options.window,
                })) {
                    throw new Error(this.options.errors.codeDidNotMatch);
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Generate a new two factor secret
     */
    TwoFactor.prototype.getNewAuthSecret = function () {
        return speakeasy.generateSecret({
            length: this.options.secretLength,
            name: this.options.appName,
        });
    };
    /**
     * Verify the code is correct
     * Add the code to the user profile
     * Throw if user already have 2fa enabled
     */
    TwoFactor.prototype.set = function (userId, secret, code) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var user, twoFactorService;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!code) {
                            throw new Error(this.options.errors.codeRequired);
                        }
                        return [4 /*yield*/, this.db.findUserById(userId)];
                    case 1:
                        user = _a.sent();
                        if (!user) {
                            throw new Error(this.options.errors.userNotFound);
                        }
                        twoFactorService = utils_1.getUserTwoFactorService(user);
                        // If user already have 2fa return error
                        if (twoFactorService) {
                            throw new Error(this.options.errors.userTwoFactorAlreadySet);
                        }
                        if (!speakeasy.totp.verify({
                            secret: secret.base32,
                            encoding: 'base32',
                            token: code,
                            window: this.options.window,
                        })) return [3 /*break*/, 3];
                        twoFactorService = {
                            secret: secret,
                        };
                        return [4 /*yield*/, this.db.setService(userId, this.serviceName, twoFactorService)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3: throw new Error(this.options.errors.codeDidNotMatch);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Remove two factor for a user
     */
    TwoFactor.prototype.unset = function (userId, code) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var user, twoFactorService;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!code) {
                            throw new Error(this.options.errors.codeRequired);
                        }
                        return [4 /*yield*/, this.db.findUserById(userId)];
                    case 1:
                        user = _a.sent();
                        if (!user) {
                            throw new Error(this.options.errors.userNotFound);
                        }
                        twoFactorService = utils_1.getUserTwoFactorService(user);
                        // If user does not have 2fa set return error
                        if (!twoFactorService) {
                            throw new Error(this.options.errors.userTwoFactorNotSet);
                        }
                        if (speakeasy.totp.verify({
                            secret: twoFactorService.secret.base32,
                            encoding: 'base32',
                            token: code,
                            window: this.options.window,
                        })) {
                            this.db.unsetService(userId, this.serviceName);
                        }
                        else {
                            throw new Error(this.options.errors.codeDidNotMatch);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return TwoFactor;
}());
exports.TwoFactor = TwoFactor;
//# sourceMappingURL=two-factor.js.map